
LED_MATRIX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800200  00800200  00000310  2**0
                  ALLOC
  3 .stab         000008d0  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c2b  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001820  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000cd8  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b42  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000ed  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00003167  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 31       	cpi	r26, 0x16	; 22
 100:	b1 07       	cpc	r27, r17
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 33 01 	call	0x266	; 0x266 <main>
 108:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <mxcontrol_init>:
#include <avr/interrupt.h>
uint8_t crow;
uint8_t spibuf[3];
volatile uint8_t vmem[9][2];

void mxcontrol_init(void){
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	//set control pins direction
	DISPLAY_DDR |= (1<<MOSI_P | 1<<SCK_P | 1<<STB_P | 1<<OE_P | 1<<RST_P);
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	24 e2       	ldi	r18, 0x24	; 36
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	27 63       	ori	r18, 0x37	; 55
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
	//set initial state
	DISPLAY_PORT |= (1<<OE_P | 1<<RST_P); //disable output and reset
 12a:	85 e2       	ldi	r24, 0x25	; 37
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	25 e2       	ldi	r18, 0x25	; 37
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	20 63       	ori	r18, 0x30	; 48
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18

	//configure spi: Master, LSB first, FCPU/128
	SPCR |= (1<<SPE | 1<<DORD | 1<<MSTR | 1<<SPR1 | 1<<SPR0);
 13c:	8c e4       	ldi	r24, 0x4C	; 76
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2c e4       	ldi	r18, 0x4C	; 76
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	23 67       	ori	r18, 0x73	; 115
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18

	crow = 0; //row's cursor on a first row
 14e:	10 92 00 02 	sts	0x0200, r1

}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <mxcontrol_drawnextline>:

void mxcontrol_drawnextline(void)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	1f 92       	push	r1
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	//high
	spibuf[2] = vmem[crow][0];
 162:	80 91 00 02 	lds	r24, 0x0200
 166:	88 2f       	mov	r24, r24
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	8c 5f       	subi	r24, 0xFC	; 252
 170:	9d 4f       	sbci	r25, 0xFD	; 253
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	80 93 03 02 	sts	0x0203, r24
	//middle
	spibuf[1] = vmem[crow][1] & ~0x07;
 17a:	80 91 00 02 	lds	r24, 0x0200
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	8b 5f       	subi	r24, 0xFB	; 251
 188:	9d 4f       	sbci	r25, 0xFD	; 253
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	88 7f       	andi	r24, 0xF8	; 248
 190:	80 93 02 02 	sts	0x0202, r24
	if (crow < 3){
 194:	80 91 00 02 	lds	r24, 0x0200
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	90 f4       	brcc	.+36     	; 0x1c0 <mxcontrol_drawnextline+0x68>
		spibuf[1] |= (0x04>>crow);
 19c:	80 91 02 02 	lds	r24, 0x0202
 1a0:	48 2f       	mov	r20, r24
 1a2:	80 91 00 02 	lds	r24, 0x0200
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 2e       	mov	r0, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <mxcontrol_drawnextline+0x5e>
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <mxcontrol_drawnextline+0x5a>
 1ba:	84 2b       	or	r24, r20
 1bc:	80 93 02 02 	sts	0x0202, r24
	}
	//low
	if (crow >= 3){
 1c0:	80 91 00 02 	lds	r24, 0x0200
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	90 f0       	brcs	.+36     	; 0x1ec <mxcontrol_drawnextline+0x94>
		spibuf[0] = (0x80 >> (crow-3));
 1c8:	80 91 00 02 	lds	r24, 0x0200
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9c 01       	movw	r18, r24
 1d2:	23 50       	subi	r18, 0x03	; 3
 1d4:	31 09       	sbc	r19, r1
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <mxcontrol_drawnextline+0x8a>
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <mxcontrol_drawnextline+0x86>
 1e6:	80 93 01 02 	sts	0x0201, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <mxcontrol_drawnextline+0x98>
	}else{
		spibuf[0] = 0x00;
 1ec:	10 92 01 02 	sts	0x0201, r1
	}
	//display strobe disable
	DISPLAY_PORT &= ~(1<<STB_P);
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	25 e2       	ldi	r18, 0x25	; 37
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	f9 01       	movw	r30, r18
 1fa:	20 81       	ld	r18, Z
 1fc:	2e 7f       	andi	r18, 0xFE	; 254
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
	//send spi
	for (i=0;i<3;i++)
 202:	19 82       	std	Y+1, r1	; 0x01
 204:	15 c0       	rjmp	.+42     	; 0x230 <mxcontrol_drawnextline+0xd8>
	{
		SPDR = spibuf[i];
 206:	8e e4       	ldi	r24, 0x4E	; 78
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	22 2f       	mov	r18, r18
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	2f 5f       	subi	r18, 0xFF	; 255
 212:	3d 4f       	sbci	r19, 0xFD	; 253
 214:	f9 01       	movw	r30, r18
 216:	20 81       	ld	r18, Z
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
		while (!(SPSR & (1<<SPIF))); //wait for TX complete
 21c:	00 00       	nop
 21e:	8d e4       	ldi	r24, 0x4D	; 77
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	d4 f7       	brge	.-12     	; 0x21e <mxcontrol_drawnextline+0xc6>
		spibuf[0] = 0x00;
	}
	//display strobe disable
	DISPLAY_PORT &= ~(1<<STB_P);
	//send spi
	for (i=0;i<3;i++)
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	40 f3       	brcs	.-48     	; 0x206 <mxcontrol_drawnextline+0xae>
		SPDR = spibuf[i];
		while (!(SPSR & (1<<SPIF))); //wait for TX complete
	}

	//sisplay strobe enable
	DISPLAY_PORT |= (1<<STB_P);
 236:	85 e2       	ldi	r24, 0x25	; 37
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	25 e2       	ldi	r18, 0x25	; 37
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	21 60       	ori	r18, 0x01	; 1
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18

	//set next row
	crow++;
 248:	80 91 00 02 	lds	r24, 0x0200
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 00 02 	sts	0x0200, r24
	if(crow > 8){
 252:	80 91 00 02 	lds	r24, 0x0200
 256:	89 30       	cpi	r24, 0x09	; 9
 258:	10 f0       	brcs	.+4      	; 0x25e <mxcontrol_drawnextline+0x106>
		crow = 0;
 25a:	10 92 00 02 	sts	0x0200, r1
	}
}
 25e:	0f 90       	pop	r0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <main>:
 *  Created on: May 4, 2016
 *      Author: william
 */
#include <avr/io.h>

int main(void){
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
	return 0;
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
